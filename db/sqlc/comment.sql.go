// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: comment.sql

package db

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
    content,
    book_id,
    created_by
) VALUES (
    $1, $2, $3
) RETURNING id, content, book_id, created_by, created_at
`

type CreateCommentParams struct {
	Content   string `json:"content"`
	BookID    int32  `json:"book_id"`
	CreatedBy int32  `json:"created_by"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.Content, arg.BookID, arg.CreatedBy)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.BookID,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const getComment = `-- name: GetComment :one
SELECT id, content, book_id, created_by, created_at
FROM comments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetComment(ctx context.Context, id int32) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.BookID,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const listCommentsByBookId = `-- name: ListCommentsByBookId :many
SELECT id, content, book_id, created_by, created_at
FROM comments
WHERE book_id = $2 AND NOT id > $3
ORDER BY id DESC
LIMIT $1
`

type ListCommentsByBookIdParams struct {
	Limit  int32 `json:"limit"`
	BookID int32 `json:"book_id"`
	LastID int32 `json:"last_id"`
}

func (q *Queries) ListCommentsByBookId(ctx context.Context, arg ListCommentsByBookIdParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listCommentsByBookId, arg.Limit, arg.BookID, arg.LastID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.BookID,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments
SET content = $2
WHERE id = $1
RETURNING id, content, book_id, created_by, created_at
`

type UpdateCommentParams struct {
	ID      int32  `json:"id"`
	Content string `json:"content"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, updateComment, arg.ID, arg.Content)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.BookID,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}
