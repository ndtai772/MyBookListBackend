// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: multi_table.sql

package db

import (
	"context"
)

const listBooksByCategoryId = `-- name: ListBooksByCategoryId :many
SELECT books.id, books.title, books.author, books.description, books.modified_at, books.created_at
FROM books
LEFT JOIN book_category
ON  book_category.category_id = $3
    AND book_category.book_id = books.id
ORDER BY books.id
LIMIT $1
OFFSET $2
`

type ListBooksByCategoryIdParams struct {
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
	CategoryID int32 `json:"category_id"`
}

func (q *Queries) ListBooksByCategoryId(ctx context.Context, arg ListBooksByCategoryIdParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBooksByCategoryId, arg.Limit, arg.Offset, arg.CategoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Description,
			&i.ModifiedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
