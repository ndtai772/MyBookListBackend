// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: bookmark.sql

package db

import (
	"context"
)

const checkBookmark = `-- name: CheckBookmark :one
SELECT id, book_id, type, created_by, created_at
FROM bookmarks
WHERE book_id = $1 AND created_by = $2
`

type CheckBookmarkParams struct {
	BookID    int32 `json:"book_id"`
	CreatedBy int32 `json:"created_by"`
}

func (q *Queries) CheckBookmark(ctx context.Context, arg CheckBookmarkParams) (Bookmark, error) {
	row := q.db.QueryRowContext(ctx, checkBookmark, arg.BookID, arg.CreatedBy)
	var i Bookmark
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.Type,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const createBookmark = `-- name: CreateBookmark :one
INSERT INTO bookmarks (
    book_id,
    type,
    created_by
) VALUES (
    $1, $2, $3
) RETURNING id, book_id, type, created_by, created_at
`

type CreateBookmarkParams struct {
	BookID    int32 `json:"book_id"`
	Type      int32 `json:"type"`
	CreatedBy int32 `json:"created_by"`
}

func (q *Queries) CreateBookmark(ctx context.Context, arg CreateBookmarkParams) (Bookmark, error) {
	row := q.db.QueryRowContext(ctx, createBookmark, arg.BookID, arg.Type, arg.CreatedBy)
	var i Bookmark
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.Type,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBookmark = `-- name: DeleteBookmark :exec
DELETE FROM bookmarks
WHERE id = $1
`

func (q *Queries) DeleteBookmark(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBookmark, id)
	return err
}

const getBookmark = `-- name: GetBookmark :one
SELECT id, book_id, type, created_by, created_at
FROM bookmarks
WHERE id = $1
`

func (q *Queries) GetBookmark(ctx context.Context, id int32) (Bookmark, error) {
	row := q.db.QueryRowContext(ctx, getBookmark, id)
	var i Bookmark
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.Type,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const listBookmarkedBooksByAccountId = `-- name: ListBookmarkedBooksByAccountId :many
SELECT bd.id,
       title,
       author,
       description,
       year,
       language,
       publisher,
       pages,
       cover_url,
       categories,
       comment_count,
       bookmark_count,
       rate_count,
       rate_avg,
       bookmarks.id   as bookmark_id,
       bookmarks.type as bookmark_type
FROM bookmarks
JOIN book_detail bd on bookmarks.book_id = bd.id
WHERE bookmarks.created_by = $1
ORDER BY bookmarks.id DESC
`

type ListBookmarkedBooksByAccountIdRow struct {
	ID            int32  `json:"id"`
	Title         string `json:"title"`
	Author        string `json:"author"`
	Description   string `json:"description"`
	Year          int16  `json:"year"`
	Language      string `json:"language"`
	Publisher     string `json:"publisher"`
	Pages         int16  `json:"pages"`
	CoverUrl      string `json:"cover_url"`
	Categories    string `json:"categories"`
	CommentCount  int64  `json:"comment_count"`
	BookmarkCount int64  `json:"bookmark_count"`
	RateCount     int64  `json:"rate_count"`
	RateAvg       string `json:"rate_avg"`
	BookmarkID    int32  `json:"bookmark_id"`
	BookmarkType  int32  `json:"bookmark_type"`
}

func (q *Queries) ListBookmarkedBooksByAccountId(ctx context.Context, createdBy int32) ([]ListBookmarkedBooksByAccountIdRow, error) {
	rows, err := q.db.QueryContext(ctx, listBookmarkedBooksByAccountId, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListBookmarkedBooksByAccountIdRow{}
	for rows.Next() {
		var i ListBookmarkedBooksByAccountIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Description,
			&i.Year,
			&i.Language,
			&i.Publisher,
			&i.Pages,
			&i.CoverUrl,
			&i.Categories,
			&i.CommentCount,
			&i.BookmarkCount,
			&i.RateCount,
			&i.RateAvg,
			&i.BookmarkID,
			&i.BookmarkType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookmarkType = `-- name: UpdateBookmarkType :one
UPDATE bookmarks
SET type = $1
WHERE id = $2
RETURNING id, book_id, type, created_by, created_at
`

type UpdateBookmarkTypeParams struct {
	NewBookmarkType int32 `json:"new_bookmark_type"`
	ID              int32 `json:"id"`
}

func (q *Queries) UpdateBookmarkType(ctx context.Context, arg UpdateBookmarkTypeParams) (Bookmark, error) {
	row := q.db.QueryRowContext(ctx, updateBookmarkType, arg.NewBookmarkType, arg.ID)
	var i Bookmark
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.Type,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}
