// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: bookmark.sql

package db

import (
	"context"
)

const createBookmark = `-- name: CreateBookmark :one
INSERT INTO bookmarks (
    book_id,
    created_by
) VALUES (
    $1, $2
) RETURNING id, book_id, created_by, created_at
`

type CreateBookmarkParams struct {
	BookID    int32 `json:"book_id"`
	CreatedBy int32 `json:"created_by"`
}

func (q *Queries) CreateBookmark(ctx context.Context, arg CreateBookmarkParams) (Bookmark, error) {
	row := q.db.QueryRowContext(ctx, createBookmark, arg.BookID, arg.CreatedBy)
	var i Bookmark
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBookmark = `-- name: DeleteBookmark :exec
DELETE FROM bookmarks
WHERE id = $1
`

func (q *Queries) DeleteBookmark(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBookmark, id)
	return err
}

const getBookmark = `-- name: GetBookmark :one
SELECT id, book_id, created_by, created_at
FROM bookmarks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBookmark(ctx context.Context, id int32) (Bookmark, error) {
	row := q.db.QueryRowContext(ctx, getBookmark, id)
	var i Bookmark
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const listBookmarksByAccountId = `-- name: ListBookmarksByAccountId :many
SELECT id, book_id, created_by, created_at
FROM bookmarks
WHERE created_by = $3
ORDER BY id DESC
LIMIT $1
OFFSET $2
`

type ListBookmarksByAccountIdParams struct {
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
	CreatedBy int32 `json:"created_by"`
}

func (q *Queries) ListBookmarksByAccountId(ctx context.Context, arg ListBookmarksByAccountIdParams) ([]Bookmark, error) {
	rows, err := q.db.QueryContext(ctx, listBookmarksByAccountId, arg.Limit, arg.Offset, arg.CreatedBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Bookmark{}
	for rows.Next() {
		var i Bookmark
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
