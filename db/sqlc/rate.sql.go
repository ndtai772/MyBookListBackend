// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: rate.sql

package db

import (
	"context"
)

const createRate = `-- name: CreateRate :one
INSERT INTO rates (
    book_id,
    created_by,
    rate_value
) VALUES (
    $1, $2, $3
) RETURNING id, book_id, created_by, rate_value, modified_at, created_at
`

type CreateRateParams struct {
	BookID    int32 `json:"book_id"`
	CreatedBy int32 `json:"created_by"`
	RateValue int32 `json:"rate_value"`
}

func (q *Queries) CreateRate(ctx context.Context, arg CreateRateParams) (Rate, error) {
	row := q.db.QueryRowContext(ctx, createRate, arg.BookID, arg.CreatedBy, arg.RateValue)
	var i Rate
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.CreatedBy,
		&i.RateValue,
		&i.ModifiedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRate = `-- name: DeleteRate :exec
DELETE FROM rates
WHERE id = $1
`

func (q *Queries) DeleteRate(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteRate, id)
	return err
}

const getRate = `-- name: GetRate :one
SELECT id, book_id, created_by, rate_value, modified_at, created_at
FROM rates
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetRate(ctx context.Context, id int32) (Rate, error) {
	row := q.db.QueryRowContext(ctx, getRate, id)
	var i Rate
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.CreatedBy,
		&i.RateValue,
		&i.ModifiedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listRatesByAccountId = `-- name: ListRatesByAccountId :many
SELECT id, book_id, created_by, rate_value, modified_at, created_at
FROM rates
WHERE created_by = $3
LIMIT $1
OFFSET $2
`

type ListRatesByAccountIdParams struct {
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
	CreatedBy int32 `json:"created_by"`
}

func (q *Queries) ListRatesByAccountId(ctx context.Context, arg ListRatesByAccountIdParams) ([]Rate, error) {
	rows, err := q.db.QueryContext(ctx, listRatesByAccountId, arg.Limit, arg.Offset, arg.CreatedBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rate{}
	for rows.Next() {
		var i Rate
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.CreatedBy,
			&i.RateValue,
			&i.ModifiedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRatesByBookId = `-- name: ListRatesByBookId :many
SELECT id, book_id, created_by, rate_value, modified_at, created_at
FROM rates
WHERE book_id = $3
ORDER BY id DESC
LIMIT $1
OFFSET $2
`

type ListRatesByBookIdParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
	BookID int32 `json:"book_id"`
}

func (q *Queries) ListRatesByBookId(ctx context.Context, arg ListRatesByBookIdParams) ([]Rate, error) {
	rows, err := q.db.QueryContext(ctx, listRatesByBookId, arg.Limit, arg.Offset, arg.BookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rate{}
	for rows.Next() {
		var i Rate
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.CreatedBy,
			&i.RateValue,
			&i.ModifiedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRate = `-- name: UpdateRate :one
UPDATE rates
SET rate_value = $2
WHERE id = $1
RETURNING id, book_id, created_by, rate_value, modified_at, created_at
`

type UpdateRateParams struct {
	ID        int32 `json:"id"`
	RateValue int32 `json:"rate_value"`
}

func (q *Queries) UpdateRate(ctx context.Context, arg UpdateRateParams) (Rate, error) {
	row := q.db.QueryRowContext(ctx, updateRate, arg.ID, arg.RateValue)
	var i Rate
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.CreatedBy,
		&i.RateValue,
		&i.ModifiedAt,
		&i.CreatedAt,
	)
	return i, err
}
