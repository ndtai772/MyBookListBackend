// Code generated by sqlc. DO NOT EDIT.
// source: rate.sql

package db

import (
	"context"
)

const createRate = `-- name: CreateRate :one
INSERT INTO rates (
    book_id,
    created_by,
    rate_value
) VALUES (
    $1, $2, $3
) RETURNING id, book_id, created_by, rate_value, modified_at, created_at
`

type CreateRateParams struct {
	BookID    int32
	CreatedBy int32
	RateValue int32
}

func (q *Queries) CreateRate(ctx context.Context, arg CreateRateParams) (Rate, error) {
	row := q.db.QueryRowContext(ctx, createRate, arg.BookID, arg.CreatedBy, arg.RateValue)
	var i Rate
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.CreatedBy,
		&i.RateValue,
		&i.ModifiedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRate = `-- name: DeleteRate :exec
DELETE FROM rates
WHERE id = $1
`

func (q *Queries) DeleteRate(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteRate, id)
	return err
}

const getRate = `-- name: GetRate :one
SELECT id, book_id, created_by, rate_value, modified_at, created_at
FROM rates
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetRate(ctx context.Context, id int32) (Rate, error) {
	row := q.db.QueryRowContext(ctx, getRate, id)
	var i Rate
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.CreatedBy,
		&i.RateValue,
		&i.ModifiedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateRate = `-- name: UpdateRate :one
UPDATE rates
SET rate_value = $2
WHERE id = $1
RETURNING id, book_id, created_by, rate_value, modified_at, created_at
`

type UpdateRateParams struct {
	ID        int32
	RateValue int32
}

func (q *Queries) UpdateRate(ctx context.Context, arg UpdateRateParams) (Rate, error) {
	row := q.db.QueryRowContext(ctx, updateRate, arg.ID, arg.RateValue)
	var i Rate
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.CreatedBy,
		&i.RateValue,
		&i.ModifiedAt,
		&i.CreatedAt,
	)
	return i, err
}
