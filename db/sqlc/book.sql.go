// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: book.sql

package db

import (
	"context"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
    title,
    author,
    description,
    year,
    language,
    publisher,
    pages
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, title, author, description, year, language, publisher, pages, cover_url, created_at
`

type CreateBookParams struct {
	Title       string `json:"title"`
	Author      string `json:"author"`
	Description string `json:"description"`
	Year        int16  `json:"year"`
	Language    string `json:"language"`
	Publisher   string `json:"publisher"`
	Pages       int16  `json:"pages"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.Title,
		arg.Author,
		arg.Description,
		arg.Year,
		arg.Language,
		arg.Publisher,
		arg.Pages,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Description,
		&i.Year,
		&i.Language,
		&i.Publisher,
		&i.Pages,
		&i.CoverUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getBook = `-- name: GetBook :one
SELECT id, title, author, description, year, language, publisher, pages, cover_url, created_at
FROM books
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Description,
		&i.Year,
		&i.Language,
		&i.Publisher,
		&i.Pages,
		&i.CoverUrl,
		&i.CreatedAt,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT id, title, author, description, year, language, publisher, pages, cover_url, created_at
FROM books
WHERE NOT id > $2
ORDER BY id DESC
LIMIT $1
`

type ListBooksParams struct {
	Limit  int32 `json:"limit"`
	LastID int32 `json:"last_id"`
}

func (q *Queries) ListBooks(ctx context.Context, arg ListBooksParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBooks, arg.Limit, arg.LastID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Description,
			&i.Year,
			&i.Language,
			&i.Publisher,
			&i.Pages,
			&i.CoverUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
