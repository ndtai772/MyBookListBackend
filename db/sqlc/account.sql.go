// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    name,
    email,
    hashed_password,
    is_admin
) VALUES (
    $1, $2, $3, $4
) RETURNING id, name, email, hashed_password, avatar_url, is_admin, created_at
`

type CreateAccountParams struct {
	Name           string `json:"name"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
	IsAdmin        bool   `json:"is_admin"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.Name,
		arg.Email,
		arg.HashedPassword,
		arg.IsAdmin,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
		&i.AvatarUrl,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, name, email, hashed_password, avatar_url, is_admin, created_at
FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
		&i.AvatarUrl,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}
