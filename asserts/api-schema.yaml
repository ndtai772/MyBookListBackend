openapi: "3.0.2"
info:
  title: MyBookList API
  version: "0.1.0"
servers:
  - url: https://api.mybooklist.ndtai.me
security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  parameters:
    page_size:
      name: page_size
      in: query
      schema: { type: integer, minimum: 1, maximum: 100 }
      required: false
    last_id:
      name: last_id
      in: query
      schema: { type: integer, minimum: 0 }
      required: false
    offset:
      name: offset
      in: query
      schema: { type: integer, minimum: 0 }
      required: false
    account_id:
      name: account_id
      in: query
      schema: { type: integer }
      required: true

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              code: { type: number }
              message: { type: string }
    InvalidRequestSchema:
      description: Invalid request scheme
      content:
        application/json:
          schema:
            type: object
            properties:
              message: { type: string }

  schemas:
    name:
      type: string
      maxLength: 255

    AccountInfo:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        email: { type: string, format: email }
        avatar_url: { type: string, format: uri }
        is_admin: { type: boolean }
        created_at: { type: string, format: timestamp }
    AccountBrief:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        is_admin: { type: boolean }
        avatar: { type: string, format: uri }
    BookBrief:
      type: object
      properties:
        id: { type: integer }
        title: { type: string }
        author: { type: string }
        description: { type: string }
        rate_avg: { type: integer }
        rate_count: { type: integer }
        comment_count: { type: integer }
        categories:
          type: array
          items: { type: string }
        created_at: { type: string, format: timestamp }
    CategoryBrief:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
    CategoryInfo:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        description: { type: string }
        created_at: { type: string, format: timestamp }
    BookmarkInfo:
      type: object
      properties:
        id: { type: integer }
        book: { $ref: "#/components/schemas/BookBrief" }
        kind:
          enum:
            - reading
            - plan_to_read
            - read
        created_at: { type: string, format: timestamp }
    FeedbackInfo:
      type: object

      properties:
        id: { type: integer }
        content: { type: string }
        feedback_status: { enum: [processing, resolved, not_resolved] }
        message: { type: string }
        created_by: { $ref: "#/components/schemas/AccountBrief" }
        created_at: { type: string, format: timestamp }
    RateInfo:
      type: object
      properties:
        id: { type: integer }
        score: { type: number, maximum: 5, minimum: 1 }
        created_by: { $ref: "#/components/schemas/AccountBrief" }
        created_at: { type: string, format: timestamp }
    CommentInfo:
      type: object
      properties:
        id: { type: integer }
        book_id: { type: integer }
        content: { type: string }
        created_by: { $ref: "#/components/schemas/AccountBrief" }
        created_at: { type: string, format: timestamp }

paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: Login
      security: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, format: password }

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
                  refresh_token: { type: string }
                  account: { $ref: "#/components/schemas/AccountInfo" }
        400: { $ref: "#/components/responses/BadRequest" }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh token
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token: { type: string }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
                  ttl: { type: string }
        400: { $ref: "#/components/responses/BadRequest" }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }

  /accounts:
    post:
      summary: Create account
      tags: [Account]
      security: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [name, password, email]
              properties:
                name: { $ref: "#/components/schemas/name" }
                password: { type: string, format: password }
                email: { type: string, format: email }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AccountInfo" }
        400: { $ref: "#/components/responses/BadRequest" }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }

  /accounts/{id}:
    parameters:
      - name: id
        in: path
        schema: { type: integer }
        required: true
    get:
      summary: View account info
      tags: [Account]
      security: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AccountInfo" }
        404: { description: NotFound }
    patch:
      summary: Update account
      tags: [Account]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              minProperties: 1
              properties:
                name: { $ref: "#/components/schemas/name" }
                password: { type: string, pattern: password }
      responses:
        204: { description: OK }
        400: { $ref: "#/components/responses/BadRequest" }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }

  /accounts/{id}/bookmarks:
    parameters:
      - name: id
        in: path
        schema: { type: integer }
        required: true
    get:
      summary: List personal bookmarks
      tags: [Bookmark]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/BookmarkInfo" }
        401: { description: Unauthorize }
        403: { description: Forbidden }

  /books:
    get:
      summary: List books
      tags: [Book]
      security: []
      parameters:
        - name: q
          in: query
          schema: { type: string }
          description: |
            search query, results will match any book that contain the search query in it info (title, author, description, etc)
          required: false
        - $ref: "#/components/parameters/page_size"
        - $ref: "#/components/parameters/offset"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/BookBrief" }
                  page_size: { type: integer }
                  offset: { type: integer }

  /books/{id}:
    parameters:
      - name: id
        in: path
        schema: { type: integer }
        required: true
    get:
      summary: View book info
      tags: [Book]
      security: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/BookBrief" }
        404: { description: NotFound }

  /books/{id}/comments:
    parameters:
      - name: id
        in: path
        schema: { type: integer }
        required: true
    get:
      summary: List comments about a book
      tags: [Book, Comment]
      parameters:
        - $ref: "#/components/parameters/page_size"
        - $ref: "#/components/parameters/last_id"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/CommentInfo" }
                  page_size: { type: integer }
                  last_id: { type: integer }
        401: { description: Unauthorize }

  /books/{id}/rate:
    parameters:
      - name: id
        in: path
        schema: { type: integer }
        required: true
    get:
      summary: View personal rate of a book
      tags: [Rate]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema: { $ref: "#/components/schemas/RateInfo" }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }

  /bookmarks:
    post:
      summary: Bookmark a book
      tags: [Bookmark]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [book_id]
              properties:
                book_id: { type: integer }
                bookmark_type: { type: integer }

      responses:
        204: { description: OK }
        400: { $ref: "#/components/responses/BadRequest" }
        401: { description: Unauthorize }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }

  /bookmarks/{id}:
    parameters:
      - name: id
        in: path
        schema: { type: integer }
        required: true
    delete:
      summary: Remove bookmark
      tags: [Bookmark]
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
    patch:
      summary: Update bookmark type
      tags: [Bookmark]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [bookmark_type]
              properties:
                bookmark_type: { type: string }

      responses:
        200:
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/BookmarkInfo" }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }

  /rates:
    post:
      summary: Add rate
      tags: [Rate]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [score]
              properties:
                score: { type: integer, maximum: 10, minimum: 1 }
                book_id: { type: integer }
      responses:
        204: { description: OK }
        400: { $ref: "#/components/responses/BadRequest" }
        401: { description: Unauthorize }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }

  /rates/{id}:
    parameters:
      - name: id
        in: path
        schema: { type: integer }
        required: true
    patch:
      summary: Update rate
      tags: [Rate]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [score]
              properties:
                score: { type: integer, maximum: 10, minimum: 1 }
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }
    delete:
      summary: Remove rate
      tags: [Rate]
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }

  /comments:
    post:
      summary: Add comment
      tags: [Comment]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [book_id, content]
              properties:
                book_id: { type: integer }
                content: { type: string }
      responses:
        204: { description: OK }
        400: { $ref: "#/components/responses/BadRequest" }
        401: { description: Unauthorize }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }

  /comments/{id}:
    parameters:
      - name: id
        in: path
        schema: { type: integer }
        required: true
    delete:
      summary: Remove comment
      tags: [Comment]
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
  /categories:
    get:
      summary: List categories
      tags: [Category]
      security: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/CategoryInfo" }

  /categories/{id}:
    parameters:
      - name: id
        in: path
        schema: { type: integer, format: snowflakeId }
        required: true
    put:
      summary: Edit category
      tags: [Category]
      security: [Role: [admin]]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              minProperties: 1
              properties:
                name: { type: string }
                description: { type: string }
      responses:
        204: { description: Ok }
        400: { $ref: "#/components/responses/BadRequest" }
        401: { description: Unauthorize }
        404: { description: NotFound }
        403: { description: Forbidden }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }
    delete:
      summary: Remove category
      tags: [Category]
      security: [Role: [admin]]
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        404: { description: NotFound }
        403: { description: Forbidden }
